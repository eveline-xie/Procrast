{"version":3,"sources":["services/firebase.js","FullNavbar.js","Home.js","WelcomePage.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","db","firestore","FullNavbar","props","Navbar","bg","expand","className","src","Collapse","id","Nav","user","onClick","signout","signin","Home","console","log","to","WelcomePage","state","myProjects","handleChange","event","value","target","name","setState","saveProjectInFirebase","collection","add","time","date","Date","deadline","description","uid","then","res","getProjects","axios","post","email","displayName","message","catch","err","this","width","height","frameborder","allow","allowfullscreen","projects","map","project","toDate","toString","onChange","type","Component","App","mapStateKeys","Object","keys","key","signInUser","provider","GoogleAuthProvider","signInWithPopup","result","doc","set","loggedIn","error","getLoggedUsers","where","get","snapshot","loggedInUsers","forEach","data","push","signOutUser","signOut","getProjectsFromFirebase","onAuthStateChanged","photoURL","exact","path","render","component","React","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1542bb82.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\n  const firebaseConfig = {\n    apiKey: \"AIzaSyAwUUAEAOi-ePiTmfVnGMVhEzM3krLjDKQ\",\n    authDomain: \"upperline-app.firebaseapp.com\",\n    databaseURL: \"https://upperline-app.firebaseio.com\",\n    projectId: \"upperline-app\",\n    storageBucket: \"\",\n    messagingSenderId: \"837043626791\",\n    appId: \"1:837043626791:web:69b8e37241c861e7\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  \n  export const auth = firebase.auth()\n  export const db = firebase.firestore()\n  \n  export default firebase","import React from 'react';\nimport {\n    Navbar,\n    Nav,\n} from 'react-bootstrap';\n\nexport default function FullNavbar(props) {\n    return (\n      <Navbar bg=\"light\" expand=\"lg\">\n       <img className=\"img\" src=\"https://thumbs.dreamstime.com/b/productivity-increase-black-icon-vector-sign-isolated-background-productivity-increase-concept-symbol-illustration-productivity-133183535.jpg\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n          </Nav>\n        </Navbar.Collapse>\n          <div>\n            {\n              props.user &&\n              <button onClick={props.signout} className=\"loginButton\">\n                SignOut\n              </button>\n            }\n            {\n            !props.user &&\n            <button onClick={props.signin} className=\"loginButton\">\n               Login\n            </button>\n            }\n        </div>\n      </Navbar>\n    )  \n  }\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nexport default function Home(props) {\n  console.log(\"I am in the home function\");\n  if (props.user) return <Redirect to=\"/welcome\" />;\n\n  console.log(\"Guess there is no user prop here. Let's render!\");\n\n  return (\n    <div className=\"homePage\">\n      <br />\n      <br />\n      <h1 className=\"homePageTitle\">Procrast</h1>\n      <h2 className=\"slogan\">Meh. I will finish it later.</h2>\n      <br />\n      <p className=\"description\">\n        Although we don't want to admit it, we all procrastinate.\n        Procrastination is something that hunts us all. But life's too short to\n        procrastinate. Are you afraid that your procrastination monster is\n        dominating your life? Well, don't worry. This is the app for you.\n      </p>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport { db } from \"./services/firebase\";\n\nclass WelcomePage extends Component {\n  state = {\n    myProjects: null\n  };\n\n  handleChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    // const time = event.target.time\n    // const date = event.target.date\n    // const deadline = event.target.deadline\n    // const description = event.target.description\n    this.setState({ [name]: value });\n  };\n\n  saveProjectInFirebase = () => {\n    db.collection(\"projects\")\n      .add({\n        name: this.state.name,\n        time: this.state.time,\n        date: new Date(this.state.date),\n        deadline: new Date(this.state.deadline),\n        description: this.state.description,\n        id: this.props.user.uid\n      })\n      .then(res => {\n        this.setState({});\n        this.props.getProjects(this.props.user.uid);\n        axios.post(\n          \"https://us-central1-upperline-app.cloudfunctions.net/sendProcrast\",\n          {\n            email: this.props.user.email,\n            displayName: this.props.user.displayName,\n            message: `\n            Hello!\n            `\n          }\n        );\n      })\n      .catch(err => console.log(err));\n  };\n\n  // getProjectsFromFirebase = (uid) => {\n  //   db.collection('projects')\n  //     .where('id', '==', uid)\n  //     .get()\n  //     .then( snapshot => {\n  //       const myProjects = []\n  //       snapshot.forEach (project => {\n  //         const data = project.data\n  //         myProjects.push(data)\n\n  //       })\n  //         this.setState({myProjects:myProjects})\n  //     })\n  //     .catch( error => console.log(error))\n  // }\n\n  // static getDerivedStateFromProps(props, state)  {\n  //   if (props.user && props.user.uid) {\n  //     this.getProjectsFromFirebase(props.user.uid)\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps) {\n  //   // Typical usage (don't forget to compare props):\n  //   if (this.props.user && this.props.user.uid) {\n  //     this.getProjectsFromFirebase(this.props.user.uid)\n  //   }\n  // }\n\n  render() {\n    const { props } = this;\n    if (!props.user) return <Redirect to=\"/\" />;\n\n    return (\n      <div className=\"welcomePage\">\n        <h1 className=\"welcomePageTitle\">\n          <br />\n          Welcome, {props.user && props.user.displayName}!\n        </h1>\n        <br />\n        <strong>\n          <h2> Are you ready to conquer your procrastination monster?</h2>\n          <br />\n          <h3>\n            If you are, scroll down to add a new project or goal. You got this!\n          </h3>\n          <br />\n          <h3>\n            If you are not, watch the following video to get some inspiration.\n          </h3>\n          <br />\n          <iframe\n            width=\"560\"\n            height=\"315\"\n            src=\"https://www.youtube.com/embed/arj7oStGLkU\"\n            frameborder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowfullscreen\n          ></iframe>\n          <br />\n          <br />\n          <br />\n          <h3 className=\"myProjects myProjectsTitle\">My Projects</h3>\n          {this.props.projects &&\n            this.props.projects.map(project => {\n              return (\n                <div>\n                  <h2>Project Name: {project.name}</h2>\n                  <br />\n                  <p>Time for Project: {project.time} days</p>\n                  <br />\n                  <p>Date: {true && project.date.toDate().toString()}</p>\n                  <br />\n                  <p>\n                    Deadline: {true && project.deadline.toDate().toString()}\n                  </p>\n                  <br />\n                  <p>Description of Project: {project.description}</p>\n                </div>\n              );\n            })}\n          <p className=\"descriptionTwo\">\n            <br /> <br /> <br />\n            Insert in info about a new project or goal, and we will notify you\n            the maximum procrastination time you have on your hand through\n            email. So check your emails for alerts! Even though we would all\n            like to be conquerors of our procrastination monster all the time,\n            we are human at the end of the day, and we will need help along the\n            way to defeat our own internal monsters.\n          </p>\n          <p className=\"input\">\n            <br />\n            Name:{\" \"}\n            <input\n              name=\"name\"\n              onChange={this.handleChange}\n              value={this.state.name}\n              type=\"text\"\n            />\n          </p>\n          <p className=\"input\">\n            <br />\n            Time (Days):{\" \"}\n            <input\n              name=\"time\"\n              onChange={this.handleChange}\n              value={this.state.time}\n              type=\"number\"\n            />\n          </p>\n          <p className=\"input\">\n            <br />\n            Date:{\" \"}\n            <input\n              name=\"date\"\n              onChange={this.handleChange}\n              value={this.state.date}\n              type=\"date\"\n            />\n          </p>\n          <p className=\"input\">\n            <br />\n            Deadline:{\" \"}\n            <input\n              name=\"deadline\"\n              onChange={this.handleChange}\n              value={this.state.deadline}\n              type=\"date\"\n            />\n          </p>\n          <p className=\"input\">\n            <br />\n            Description:{\" \"}\n            <input\n              name=\"description\"\n              onChange={this.handleChange}\n              value={this.state.description}\n              type=\"text\"\n            />\n          </p>\n          <button onClick={this.saveProjectInFirebase} className=\"addButton\">\n            Add Project\n          </button>\n          <br />\n          <br />\n        </strong>\n      </div>\n    );\n  }\n}\n\nexport default WelcomePage;\n","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport firebase, { db, auth } from \"./services/firebase\";\nimport FullNavbar from \"./FullNavbar\";\nimport Home from \"./Home\";\nimport WelcomePage from \"./WelcomePage\";\n\nexport default class App extends React.Component {\n  state = ({\n    user: null,\n    myProjects: null\n  }.mapStateKeys = () => {\n    Object.keys(this.state).map(key => this.state[key]);\n  });\n\n  signInUser = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth\n      .signInWithPopup(provider)\n      .then(result => {\n        const user = result.user;\n        console.log(user.uid);\n        db.collection(\"users\")\n          .doc(user.uid)\n          .set({\n            loggedIn: true,\n            name: user.displayName\n          });\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  };\n\n  componentDidMount() {\n    console.log(\"This works\");\n    this.getLoggedUsers();\n    const getUserData = id => this.getProjectsFromFirebase(id);\n    auth.onAuthStateChanged(user => {\n      if (user) {\n        console.log(user.uid);\n        this.setState({\n          user: {\n            photoURL: user.photoURL,\n            email: user.email,\n            displayName: user.displayName,\n            uid: user.uid\n          }\n        });\n        getUserData(user.uid);\n      } else {\n        this.setState({ user: null });\n      }\n    });\n  }\n\n  getLoggedUsers = () => {\n    db.collection(\"users\")\n      .where(\"loggedIn\", \"==\", true)\n      .get()\n      .then(snapshot => {\n        const loggedInUsers = [];\n        snapshot.forEach(doc => {\n          const data = doc.data();\n          loggedInUsers.push(data);\n        });\n        this.setState({ loggedInUsers: loggedInUsers });\n      })\n      .catch(err => console.log(err));\n  };\n\n  signOutUser = () => {\n    auth.signOut();\n  };\n\n  handleChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    // const time = event.target.time\n    // const date = event.target.date\n    // const deadline = event.target.deadline\n    // const description = event.target.description\n    this.setState({ [name]: value });\n  };\n\n  getProjectsFromFirebase = uid => {\n    console.log(\"uid\");\n    console.log(uid);\n    db.collection(\"projects\")\n      .where(\"id\", \"==\", uid)\n      .get()\n      .then(snapshot => {\n        console.log(snapshot);\n        const myProjects = [];\n        snapshot.forEach(project => {\n          const data = project.data();\n          myProjects.push(data);\n        });\n        this.setState({ myProjects: myProjects }, console.log(myProjects));\n      })\n      .catch(error => console.log(error));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <main>\n            <FullNavbar\n              signout={this.signOutUser}\n              user={this.state.user}\n              signin={this.signInUser}\n            />\n            <Route exact path=\"/\" render={props => <Home {...props} />} />\n            {/* <Route path=\"/login\" component={() => <Login user={this.state.user} signin={this.signInUser}  />} /> */}\n            <Route\n              path=\"/welcome\"\n              component={() => (\n                <WelcomePage\n                  user={this.state.user}\n                  projects={this.state.myProjects}\n                  getProjects={this.getProjectsFromFirebase}\n                />\n              )}\n            />\n          </main>\n        </Router>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}